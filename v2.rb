puts '##########################################################'
puts 'euler #1 -  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.'
puts 'Find the sum of all the multiples of 3 or 5 below 1000.'
puts '##########################################################'
puts 'Find the sum of all the multiples of 3 or 5 below x.'
puts '##########################################################'
puts 'enter a number for x:'
a = gets
puts '##########################################################'

def sumOfNaturalNumbersBelow (n)
    total = 0
    
    (1..n).each do |n| 
        if n % 3 == 0 || n % 5 == 0
            total += n
         end
    end
            
    return total
end

puts 'The sum of all the multiples of 3 or 5 below '+a
puts sumOfNaturalNumbersBelow(a.to_i)
puts '##########################################################'

puts '##########################################################'
puts 'euler #2 -  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:'
puts '1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...'
puts 'By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.'
puts '##########################################################'
puts 'Find the sum of all even numbers in the Fibonacci sequence below x'
puts '##########################################################'
puts 'enter a number for x:'
a = gets.to_i
puts '##########################################################'

def fibSumsBelow (n)
    last = 1
    current = 2

    total = 0

    while current < n
        x = current + last
        if x % 2 == 0
            total += x
        end
        last = current 
        current = x
    end

    return total
end

puts 'Find the sum of all even numbers in the Fibonacci sequence below '+a.to_s
puts fibSumsBelow(a)
puts '##########################################################'

puts '##########################################################'
puts 'euler #3 - The prime factors of 13195 are 5, 7, 13 and 29.'
puts 'What is the largest prime factor of the number 600851475143 ?'
puts '##########################################################'
puts 'What is the largest prime factor of x'
puts '##########################################################'
puts 'enter a number for x:'
a = gets.to_i
puts '##########################################################'

require 'prime'

def primeFactors (n)
    return Prime.prime_division(n) 
end

puts 'The largest prime factor of x is: '+a.to_s
puts primeFactors(a)
puts '##########################################################'

puts '##########################################################'
puts 'euler #4 - A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.'
puts 'Find the largest palindrome made from the product of two 3-digit numbers.'
puts '##########################################################'
puts 'Find the largest palindrome made from the product of two x-digit numbers.'
puts '##########################################################'
puts 'enter a number for x:'
a = gets.to_i
puts '##########################################################'

def findLargePal (n)
    lower = []
    upper = []

    1.upto(n) do |n|
        if lower.length < 1
            lower.push(1)
        else
            lower.push(0)
        end 
        upper.push(9) 
    end

    result = 0

    (lower.join.to_i..upper.join.to_i).each do |x|
        (lower.join.to_i..upper.join.to_i).each do |y|
            out = x * y 
            rev = out.to_s.reverse.to_i
            if out == rev && out > result
                result = out
            end
        end
    end
    puts result
end

puts 'Find the largest palindrome made from the product of two x-digit numbers. Where x is: '+a.to_s
puts findLargePal(a)
puts '##########################################################' 